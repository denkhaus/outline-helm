---
name: outline
image:
  repository: outlinewiki/outline
  tag: 0.85.1
  pullPolicy: IfNotPresent
replicas: 1
env:
  # Non-sensitive environment variables only
  # Sensitive values (SLACK_CLIENT_SECRET, GOOGLE_CLIENT_SECRET,
  # AZURE_CLIENT_SECRET, DISCORD_CLIENT_SECRET, OIDC_CLIENT_SECRET,
  # SMTP_PASSWORD, SECRET_KEY, UTILS_SECRET)
  # must be provided via the secrets configuration below

  # Basic configuration
  # URL for the Outline application.
  # If set, this value takes precedence over the URL derived from ingress settings.
  URL: http://outline.yourdomain.tld

  #COLLABORATION_URL=

  # The REDIS_URL could be configured directly or gets assembled by the info provided in the redis section
  # When configured directly these setting takes precedence
  REDIS_URL: redis://redis-password-optional@redishost:6379/6

  # The DATABASE_URL could be configured directly or gets assembled by the info provided in the postgres section
  # When configured directly these setting takes precedence
  DATABASE_URL: postgres://postgres-user:postgres-password-optional@postgres-host:5432/postgres-database
  DATABASE_URL_TEST: postgres://postgres-user:postgres-password-optional@postgres-host:5432/postgres-database-test

  # Email configuration (non-sensitive)
  SMTP_FROM_EMAIL: "noreply@example.com"
  SMTP_REPLY_EMAIL: "christoph.nagler@musiktheater-im-revier.de"
  SMTP_PORT: 587
  SMTP_SECURE: true

  # File storage
  FILE_STORAGE: "s3" # Using minio S3-compatible storage
  FILE_STORAGE_UPLOAD_MAX_SIZE: "262144000"

  # Rate limiting
  RATE_LIMITER_ENABLED: "true"
  RATE_LIMITER_REQUESTS: "1000"
  RATE_LIMITER_DURATION_WINDOW: "60"

  # Features
  ENABLE_UPDATES: "true"
  LOG_LEVEL: "info"
  DEFAULT_LANGUAGE: "en_US"
  WEB_CONCURRENCY: "1"
  FORCE_HTTPS: "true"
  PGSSLMODE: disable

# Required Kubernetes secret containing sensitive values
# You MUST create this secret before installing the chart
secrets:
  name: "outline-secrets" # Name of your existing Kubernetes secret

  # SECRET_KEY is mandatory and must be created with `openssl rand -hex 32`
  secretKeySecretKeyName: "SECRET_KEY" # Key name in the secret for SECRET_KEY
  # UTILS_SECRET is mandatory and must be created with `openssl rand -hex 32`
  utilsSecretSecretKeyName: "UTILS_SECRET" # Key name in the secret for UTILS_SECRET

  # Authentication secrets (at least one provider required)
  # Note: Provider secret Keys get only injected if the respective *_CLIENT_ID for the Provider is defined in env section

  slackClientSecretSecretKeyName: "SLACK_CLIENT_SECRET" # Slack OAuth secret
  googleClientSecretSecretKeyName: "GOOGLE_CLIENT_SECRET" # Google OAuth secret
  azureClientSecretSecretKeyName: "AZURE_CLIENT_SECRET" # Azure/Microsoft secret
  discordClientSecretSecretKeyName: "DISCORD_CLIENT_SECRET" # Discord OAuth secret
  oidcClientSecretSecretKeyName: "OIDC_CLIENT_SECRET" # Generic OIDC secret

  # Email secret
  smtpPasswordSecretKeyName: "SMTP_PASSWORD" # SMTP password

  # Redis secret
  redisPasswordSecretKeyName: "REDIS_PASSWORD" # Key name in the secret for the Redis password

  # Integration secrets (optional)
  githubClientSecretSecretKeyName: "GITHUB_CLIENT_SECRET" # GitHub integration
  githubWebhookSecretSecretKeyName: "GITHUB_WEBHOOK_SECRET" # GitHub webhook secret
  githubAppPrivateKeySecretKeyName: "GITHUB_APP_PRIVATE_KEY" # GitHub app private key
  linearClientSecretSecretKeyName: "LINEAR_CLIENT_SECRET" # Linear integration
  notionClientSecretSecretKeyName: "NOTION_CLIENT_SECRET" # Notion import
  slackVerificationTokenSecretKeyName: "SLACK_VERIFICATION_TOKEN" # Slack integration

ingress:
  enabled: true
  className: nginx
  host: outline.yourdomain.tld
  annotations: # set your custom ingress annotations here
    # cert-manager.io/cluster-issuer: "letsencrypt-staging"
  tls:
    enabled: false

redis:
  enabled: true
  architecture: "standalone"
  persistence:
    size: 2Gi
    storageClass: ""
  auth:
    enabled: false

postgresql:
  enabled: true
  architecture: "standalone"
  postgresqlDatabase: "outline"
  postgresqlUsername: "outline"

  # PostgreSQL uses TWO different users with different privilege levels:
  # 1. Application User ("outline") - Limited privileges, used by Outline app
  # 2. Superuser ("postgres") - Full admin privileges, for setup/maintenance

  # Option 1: Hardcoded passwords (NOT recommended for production)
  # postgresqlPassword: "vh4rf^q32BcvtFqFVjny4pnM"  # Password for "outline"
  # postgresqlPostgresPassword: "Ma#wXFMz6jFqXUr^qP&K66XQbd"  # Password

  # Option 2: Use existing secret for PostgreSQL credentials
  # Configure the following to use existing secret:
  existingSecret: "outline-secrets"
  existingPasswordSecretKeyName: "POSTGRES_PASSWORD" # Key for "outline" password in existingSecret
  existingPostgresPasswordSecretKeyName: "POSTGRES_ADMIN_PASSWORD" # Key for "postgres" password in existingSecret

  persistence:
    enabled: true
    storageClass: ""
    size: 1Gi

minio:
  enabled: true
  disableWebUI: false
  ingress:
    enabled: true
    hostname: data.outline.yourdomain.tld
    certManager: false
    # Remove tls configuration to use MinIO chart defaults
    annotations: {}
      # cert-manager.io/cluster-issuer: "letsencrypt-staging"
  mode: "standalone"
  defaultBuckets: "ol-data" # should not be "outline" because of issue #2068

  # Option 1: Hardcoded credentials (NOT recommended for production)
  # secretKey:
  #   password: "Uk4LuwVFvRDiG6k4nYA5C^835V"  # MUST be replaced!
  # accessKey:
  #   password: "zFPVNNK*QNp3^V4J38Gy76SehG"  # MUST be replaced!

  # Option 2: Use existing secret for MinIO credentials (RECOMMENDED)
  # Configure the following to use an existing secret:
  existingSecret: "outline-secrets"
  existingAccessKeySecretKeyName: "MINIO_ACCESS_KEY" # Key for access key in existingSecret
  existingSecretSecretKeyName: "MINIO_SECRET_KEY" # Key for secret key in existingSecret

  persistence:
    enabled: true
    storageClass: ""
    size: 2Gi
