apiVersion: v1
kind: Secret
metadata:
  name: postgresql-credentials
  namespace: outline # Change to your namespace
type: Opaque
data:
  # PostgreSQL has TWO users with different privilege levels:
  
  # 1. Application User Password ("outline" user - limited privileges)
  #    Used by Outline application for database access
  postgresql-password: cG9zdGdyZXNxbC1wYXNzd29yZA== # "postgresql-password" base64 encoded
  
  # 2. Superuser Password ("postgres" user - full admin privileges)  
  #    Used for database setup, migrations, and administration
  postgresql-postgres-password: cG9zdGdyZXMtYWRtaW4tcGFzc3dvcmQ= # "postgres-admin-password" base64 encoded

---
# Example of how to create the PostgreSQL secret using kubectl:
# kubectl create secret generic postgresql-credentials \
#   --from-literal=postgresql-password="$(openssl rand -base64 32)" \
#   --from-literal=postgresql-postgres-password="$(openssl rand -base64 32)" \
#   --namespace=outline

---
# Example values.yaml configuration to use this secret:
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-secret-example
data:
  values.yaml: |
    postgresql:
      enabled: true
      existingSecret: "postgresql-credentials"
      existingSecretPasswordKey: "postgresql-password"        # "outline" user password
      existingSecretPostgresPasswordKey: "postgresql-postgres-password"  # "postgres" superuser password
      # Remove or comment out the hardcoded passwords when using secrets:
      # postgresqlPassword: ""         # "outline" user password (hardcoded)
      # postgresqlPostgresPassword: "" # "postgres" superuser password (hardcoded)